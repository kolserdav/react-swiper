{"version":3,"sources":["../../src/index.tsx","App.tsx","index.tsx"],"names":["getDefaultSwipe","id","Math","children","React","refs","animated","prePrev","postNext","oldSwipes","Swiper","props","dots","useState","containerRef","useRef","_defaultCurrent","swipes","useMemo","prev","current","next","map","item","getSwipes","getRef","createRef","setGoClassHandler","s","setTimeout","setBackClassHandler","wait","a","Promise","resolve","swipe","setLoad","currentId","width","_lastLeft","setLeft","onSwipe","windowWidth","startTime","Date","clear","setInterval","clearInterval","getTime","setPrev","setCurrent","setNext","onTouchHandler","touches","clientX","clientY","startClientX","startClientY","absY","lastLeft","absX","_left","onTouchWrapper","name","e","clickHandler","origin","isNext","leftVal","clickNextHandler","clickPrevHandler","resizeHandler","_width","_height","__left","_windowWidth","document","setWidth","setHeight","setWindowWidth","infitationAnimationHandler","shift","setStartCards","getNext","defaultCurrent","_n","getPrev","_p","startInvitationAnimation","clickDotHandler","target","tabindex","active","parseInt","useEffect","clearAnimate","buttonNext","buttonClose","_setLeft","invitationAnimation","isMobile","setIsMobile","window","navigator","setPreValues","d","className","ref","key","onTouchMove","onTouchStart","onTouchEnd","style","height","left","innerWidth","clsx","xmlns","viewBox","fill","type","disabled","load","onClick","role","tabIndex","old","getPrevios","App","blockSwipe","list","container","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.166d7ac7.chunk.js","sourcesContent":["/******************************************************************************************\r\n * Repository: https://github.com/kolserdav/swiper.git\r\n * Author: Sergey Kolmiller\r\n * Email: <serega12101983@gmail.com>\r\n * License: MIT\r\n * License Text: The code is distributed as is. There are no guarantees regarding the functionality of the code or parts of it.\r\n * Copyright: kolserdav, All rights reserved (c)\r\n * Create date: Mon Nov 29 2021 16:18:08 GMT+0700 (Krasnoyarsk Standard Time)\r\n ******************************************************************************************/\r\nimport React, {\r\n  useMemo,\r\n  useState,\r\n  useRef,\r\n  createRef,\r\n  RefObject,\r\n  useEffect,\r\n  TouchEvent,\r\n  Fragment,\r\n  MouseEventHandler,\r\n} from 'react';\r\nimport clsx from 'clsx';\r\nimport s from './styles.module.css';\r\n\r\n/**\r\n * Time to miliseconds of change animation by card left value\r\n */\r\nexport const SWIPE_TRANSITION_TIMEOUT = 400;\r\n\r\n/**\r\n * One of swipe card\r\n */\r\nexport interface Swipe {\r\n  id: number | null;\r\n  nextRef?: RefObject<HTMLButtonElement | HTMLDivElement | undefined>;\r\n  closeRef?: RefObject<HTMLButtonElement | HTMLDivElement | undefined>;\r\n  children: React.ReactElement | React.ReactElement[];\r\n}\r\n\r\n/**\r\n * Callback for get next or previous card content\r\n */\r\nexport type GetSwipeHandler = (oldId: number) => Promise<Swipe>;\r\n\r\n/**\r\n * One of swipe card internal\r\n */\r\ninterface SwipeFull extends Swipe {\r\n  type: 'next' | 'current' | 'prev';\r\n}\r\n\r\n/**\r\n * Event touch name\r\n */\r\ntype TouchName = 'onTouchMove' | 'onTouchStart' | 'onTouchEnd';\r\n\r\n/**\r\n * Props of Swiper component\r\n */\r\ninterface SwiperProps {\r\n  /**\r\n   * Current card content\r\n   */\r\n  defaultCurrent: Swipe;\r\n\r\n  /**\r\n   * Get next card handler\r\n   */\r\n  getNext: GetSwipeHandler;\r\n\r\n  /**\r\n   * Get previous card handler\r\n   */\r\n  getPrev: GetSwipeHandler;\r\n\r\n  /**\r\n   * Class name for content block\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * invitation animation\r\n   */\r\n  // eslint-disable-next-line react/require-default-props\r\n  invitationAnimation?: boolean;\r\n\r\n  /**\r\n   * On swipe callback\r\n   */\r\n  // eslint-disable-next-line react/require-default-props\r\n  onSwipe?: (currentId: number | null | undefined) => void;\r\n\r\n  /**\r\n   * Auto slide if provieded\r\n   */\r\n  durationAnimation?: number;\r\n\r\n  /**\r\n   * Blocked swipe event\r\n   */\r\n  blockSwipe?: boolean;\r\n\r\n  /**\r\n   * Show dots\r\n   */\r\n  dots?: {\r\n    list: number[];\r\n    active: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Create swipe list from values\r\n */\r\nconst getSwipes = (prev: Swipe, current: Swipe, next: Swipe, swipes: SwipeFull[]): SwipeFull[] => {\r\n  if (\r\n    (prev?.id === current?.id || current?.id === next?.id || next?.id === prev?.id) &&\r\n    swipes.length\r\n  ) {\r\n    return swipes;\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const result: any[] = [1, 2, 3].map((id) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    const item: any = id === 1 ? { ...prev } : id === 2 ? current : { ...next };\r\n    item.type = id === 1 ? 'prev' : id === 2 ? 'current' : 'next';\r\n    return item;\r\n  });\r\n  return result;\r\n};\r\n\r\n/**\r\n * Get default swipe with random id\r\n */\r\nconst getDefaultSwipe = (): Swipe => ({\r\n  id: Math.ceil(Math.random() * 1000),\r\n  children: <div />,\r\n});\r\n\r\nconst refs: {\r\n  [key: number]: RefObject<HTMLDivElement>;\r\n} = {};\r\n\r\nlet startClientX: number;\r\nlet startClientY: number;\r\nlet lastLeft: number;\r\nlet animated = false;\r\nlet prePrev: Swipe | null = null;\r\nlet postNext: Swipe | null = null;\r\nlet _defaultCurrent: Swipe;\r\nlet oldSwipes: SwipeFull[] = [];\r\n\r\n/**\r\n * Swiper component\r\n */\r\nexport const Swiper = (props: SwiperProps): React.ReactElement => {\r\n  const {\r\n    defaultCurrent,\r\n    getNext,\r\n    getPrev,\r\n    onSwipe,\r\n    className,\r\n    invitationAnimation,\r\n    durationAnimation,\r\n    blockSwipe,\r\n    dots,\r\n  } = props;\r\n\r\n  const [current, setCurrent] = useState<Swipe | null>();\r\n  const [prev, setPrev] = useState<Swipe | null>();\r\n  const [next, setNext] = useState<Swipe | null>();\r\n  const [windowWidth, setWindowWidth] = useState<number>(0);\r\n  const [height, setHeight] = useState<number>(0);\r\n  const [width, setWidth] = useState<number>(0);\r\n  const [_left, _setLeft] = useState<number>(0);\r\n  const [left, setLeft] = useState<number>(0);\r\n  const [isMobile, setIsMobile] = useState<boolean>();\r\n  const [load, setLoad] = useState<boolean>(false);\r\n\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  if (typeof _defaultCurrent === 'undefined') {\r\n    _defaultCurrent = defaultCurrent;\r\n  }\r\n  /**\r\n   * Create memoized swipes\r\n   */\r\n  const swipes = useMemo(\r\n    () =>\r\n      getSwipes(\r\n        prev || getDefaultSwipe(),\r\n        current || defaultCurrent,\r\n        next || getDefaultSwipe(),\r\n        oldSwipes\r\n      ),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [next, prev, current]\r\n  );\r\n\r\n  oldSwipes = swipes;\r\n\r\n  /**\r\n   * Get new or exists ref by id\r\n   */\r\n  const getRef = (id: number): typeof refs[0] => {\r\n    refs[id] = refs[id] ? refs[id] : createRef<HTMLDivElement>();\r\n    return refs[id];\r\n  };\r\n\r\n  /**\r\n   * Set to cards classes for in animation\r\n   */\r\n  const setGoClassHandler = (): void => {\r\n    getRef(next?.id || 0).current?.classList.add(s.go);\r\n    getRef(prev?.id || 0).current?.classList.add(s.go);\r\n    getRef(current?.id || 0).current?.classList.add(s.go);\r\n    setTimeout(() => {\r\n      getRef(next?.id || 0).current?.classList.remove(s.go);\r\n      getRef(prev?.id || 0).current?.classList.remove(s.go);\r\n      getRef(current?.id || 0).current?.classList.remove(s.go);\r\n    }, SWIPE_TRANSITION_TIMEOUT);\r\n  };\r\n\r\n  /**\r\n   * Set to cards classes for out animation\r\n   */\r\n  const setBackClassHandler = (): void => {\r\n    getRef(next?.id || 0).current?.classList.add(s.back);\r\n    getRef(prev?.id || 0).current?.classList.add(s.back);\r\n    getRef(current?.id || 0).current?.classList.add(s.back);\r\n    setTimeout(() => {\r\n      getRef(next?.id || 0).current?.classList.remove(s.back);\r\n      getRef(prev?.id || 0).current?.classList.remove(s.back);\r\n      getRef(current?.id || 0).current?.classList.remove(s.back);\r\n    }, SWIPE_TRANSITION_TIMEOUT);\r\n  };\r\n\r\n  /**\r\n   * Wait helper\r\n   */\r\n  const wait = async (miliseconds: number): Promise<void> => {\r\n    await new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve(0);\r\n      }, miliseconds);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Set pre previos or post next values\r\n   */\r\n  const setPreValues = (_p: Swipe | null | undefined, _n: Swipe | null | undefined) => {\r\n    if (_p) {\r\n      getPrev(_p?.id || 0).then((d) => {\r\n        prePrev = d;\r\n      });\r\n    }\r\n    if (_n) {\r\n      getNext(_n?.id || 0).then((d) => {\r\n        postNext = d;\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Run swipe animation\r\n   */\r\n  const swipe = async (_lastLeft: number): Promise<1 | 0> => {\r\n    setLoad(true);\r\n    let startTime: number;\r\n    let currentId: number | null | undefined = 0;\r\n    if (Math.abs(_lastLeft) > width / 3) {\r\n      if (_lastLeft < 0) {\r\n        if (next?.id === null) {\r\n          setBackClassHandler();\r\n          setLeft(0);\r\n          setLoad(false);\r\n          return 1;\r\n        }\r\n        currentId = next?.id;\r\n        if (onSwipe !== undefined) {\r\n          onSwipe(currentId);\r\n        }\r\n        setGoClassHandler();\r\n        setLeft(windowWidth * -1);\r\n        startTime = new Date().getTime();\r\n        if (next?.id === postNext?.id) {\r\n          await new Promise((resolve) => {\r\n            const clear = setInterval(() => {\r\n              if (next?.id !== postNext?.id) {\r\n                clearInterval(clear);\r\n                resolve(0);\r\n              }\r\n            }, 0);\r\n          });\r\n        }\r\n        await wait(SWIPE_TRANSITION_TIMEOUT - (new Date().getTime() - startTime));\r\n        setLeft(0);\r\n        setPrev(current);\r\n        setCurrent(next);\r\n        setNext(postNext);\r\n      } else {\r\n        if (prev?.id === null) {\r\n          setBackClassHandler();\r\n          setLeft(0);\r\n          setLoad(false);\r\n          return 1;\r\n        }\r\n        currentId = prev?.id;\r\n        if (onSwipe !== undefined) {\r\n          onSwipe(currentId);\r\n        }\r\n        setGoClassHandler();\r\n        setLeft(windowWidth);\r\n        startTime = new Date().getTime();\r\n        if (prev?.id === prePrev?.id) {\r\n          await new Promise((resolve) => {\r\n            const clear = setInterval(() => {\r\n              if (prev?.id !== prePrev?.id) {\r\n                clearInterval(clear);\r\n                resolve(0);\r\n              }\r\n            }, 0);\r\n          });\r\n        }\r\n        await wait(SWIPE_TRANSITION_TIMEOUT - (new Date().getTime() - startTime));\r\n        setLeft(0);\r\n        setPrev(prePrev);\r\n        setCurrent(prev);\r\n        setNext(current);\r\n      }\r\n    } else {\r\n      setBackClassHandler();\r\n      setLeft(0);\r\n      setLoad(false);\r\n      return 1;\r\n    }\r\n    setLoad(false);\r\n    return 0;\r\n  };\r\n\r\n  /**\r\n   * Touch event handler\r\n   */\r\n  const onTouchHandler = async (name: TouchName, e: TouchEvent): Promise<void> => {\r\n    const { touches } = e;\r\n    const clientX = touches[0]?.clientX;\r\n    const clientY = touches[0]?.clientY;\r\n    startClientX = startClientX || 0;\r\n    startClientY = startClientY || 0;\r\n    let absX = 0;\r\n    let absY = 0;\r\n    switch (name) {\r\n      case 'onTouchStart':\r\n        startClientX = clientX;\r\n        startClientY = clientY;\r\n        lastLeft = _left;\r\n        break;\r\n      case 'onTouchMove':\r\n        if (!blockSwipe) {\r\n          absY = Math.abs(startClientY - clientY);\r\n          absX = Math.abs(startClientX - clientX);\r\n          if (absX > absY) {\r\n            lastLeft = _left - (startClientX - clientX);\r\n            setLeft(lastLeft);\r\n          }\r\n        }\r\n        break;\r\n      case 'onTouchEnd':\r\n        if (!blockSwipe) {\r\n          await swipe(lastLeft);\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Touch event wrapper\r\n   */\r\n  const onTouchWrapper =\r\n    (name: TouchName): ((event: TouchEvent<HTMLDivElement>) => void) =>\r\n    (e): void => {\r\n      onTouchHandler(name, e);\r\n    };\r\n\r\n  /**\r\n   * On next or previous button click handler\r\n   */\r\n  const clickHandler = (origin: 'next' | 'prev'): (() => Promise<1 | 0>) => {\r\n    const isNext = origin === 'next';\r\n    return async (): Promise<1 | 0> => {\r\n      const coeff = isNext ? -1 : 1;\r\n      const leftVal = width * coeff;\r\n      if (isNext) {\r\n        setGoClassHandler();\r\n      } else {\r\n        setBackClassHandler();\r\n      }\r\n      await wait(SWIPE_TRANSITION_TIMEOUT);\r\n      await swipe(leftVal);\r\n      return 0;\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Wrapper for next button click handler\r\n   */\r\n  const clickNextHandler = clickHandler('next');\r\n\r\n  /**\r\n   * Wrapper for previous button click handler\r\n   */\r\n  const clickPrevHandler = clickHandler('prev');\r\n\r\n  const resizeHandler = (): void => {\r\n    const _width = containerRef?.current?.parentElement?.getBoundingClientRect()?.width;\r\n    const _height = containerRef?.current?.parentElement?.getBoundingClientRect()?.height;\r\n    const __left = containerRef?.current?.parentElement?.getBoundingClientRect()?.left;\r\n    const _windowWidth = document.body.clientWidth;\r\n    if (_width && _height) {\r\n      setWidth(_width);\r\n      setHeight(_height);\r\n    }\r\n    if (__left) {\r\n      setLeft(__left);\r\n    }\r\n    if (_windowWidth) {\r\n      setWindowWidth(_windowWidth);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * optional animation handler\r\n   */\r\n  const infitationAnimationHandler = async (shift: number) => {\r\n    if (shift < 0) {\r\n      setGoClassHandler();\r\n    } else {\r\n      setBackClassHandler();\r\n    }\r\n    setLeft(shift);\r\n    await wait(SWIPE_TRANSITION_TIMEOUT);\r\n    if (shift < 0) {\r\n      setBackClassHandler();\r\n    } else {\r\n      setGoClassHandler();\r\n    }\r\n    setLeft(0);\r\n    await wait(SWIPE_TRANSITION_TIMEOUT);\r\n  };\r\n\r\n  /**\r\n   * Initial start cards\r\n   */\r\n  const setStartCards = async (): Promise<void> => {\r\n    const _n = await getNext(defaultCurrent.id || 0);\r\n    const _p = await getPrev(defaultCurrent.id || 0);\r\n    setCurrent(defaultCurrent);\r\n    setPrev(_p);\r\n    setNext(_n);\r\n    prePrev = await getPrev(_p.id || 0);\r\n    postNext = await getNext(_n.id || 0);\r\n    // setPreValues(_p, _n);\r\n    _defaultCurrent = defaultCurrent;\r\n    setLoad(false);\r\n  };\r\n\r\n  /**\r\n   * Invitation animation\r\n   */\r\n  const startInvitationAnimation = async (prev: Swipe, next: Swipe): Promise<void> => {\r\n    if (prev.id) {\r\n      await infitationAnimationHandler(windowWidth / 5.5);\r\n    }\r\n    if (next.id) {\r\n      await infitationAnimationHandler((windowWidth / 5.5) * -1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler on click by dot\r\n   */\r\n  const clickDotHandler: MouseEventHandler<HTMLDivElement> = async (e: any) => {\r\n    const { target } = e;\r\n    const tabindex = target?.getAttribute('tabindex');\r\n    const active = parseInt(tabindex, 10);\r\n    const currId = current?.id || 0;\r\n    if (currId < active) {\r\n      const next = await getNext(active - 1);\r\n      postNext = await getNext(active);\r\n      setNext(next);\r\n      await swipe(-1000);\r\n      const prev = await getPrev(next?.id || 0);\r\n      prePrev = await getPrev((next?.id || 0) - 1);\r\n      setPrev(prev);\r\n      setCurrent(next);\r\n    } else {\r\n      const prev = await getPrev(active + 1);\r\n      prePrev = await getPrev(active);\r\n      setPrev(prev);\r\n      await swipe(1000);\r\n      const next = await getNext(prev?.id || 0);\r\n      postNext = await getNext((prev?.id || 0) + 1);\r\n      setNext(next);\r\n      setCurrent(prev);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let clearAnimate: NodeJS.Timeout;\r\n    if (durationAnimation) {\r\n      clearAnimate = setInterval(() => {\r\n        clickNextHandler();\r\n      }, durationAnimation);\r\n    }\r\n    const _width = containerRef?.current?.parentElement?.getBoundingClientRect()?.width;\r\n    const _height = containerRef?.current?.parentElement?.getBoundingClientRect()?.height;\r\n    const __left = containerRef?.current?.parentElement?.getBoundingClientRect()?.left;\r\n\r\n    const _windowWidth = document.body.clientWidth;\r\n    const buttonNext = current?.nextRef?.current;\r\n    const buttonClose = current?.closeRef?.current;\r\n    buttonNext?.addEventListener('click', clickNextHandler);\r\n    buttonClose?.addEventListener('click', clickNextHandler);\r\n    if (_width && !width && _height && !height) {\r\n      setWidth(_width);\r\n      setHeight(_height);\r\n    }\r\n    // save container left\r\n    if (__left && !left) {\r\n      _setLeft(__left);\r\n    }\r\n    // save window width\r\n    if (!windowWidth && _windowWidth) {\r\n      setWindowWidth(_windowWidth);\r\n    }\r\n    // set start cards\r\n    if (!current || !prev || !next || _defaultCurrent !== defaultCurrent) {\r\n      setStartCards();\r\n    }\r\n    // run invitation animation\r\n    if (invitationAnimation && width && !animated) {\r\n      if (prev && next) {\r\n        animated = true;\r\n        startInvitationAnimation(prev, next);\r\n      }\r\n    }\r\n    // set is mobile\r\n    if (typeof isMobile === 'undefined') {\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\r\n      // @ts-ignore\r\n      setIsMobile('ontouchstart' in window || typeof navigator?.msMaxTouchPoints !== 'undefined');\r\n    }\r\n    setPreValues(prev, next);\r\n    window.addEventListener('resize', resizeHandler);\r\n    return (): void => {\r\n      if (clearAnimate) {\r\n        clearInterval(clearAnimate);\r\n      }\r\n      window.removeEventListener('resize', resizeHandler);\r\n      buttonNext?.removeEventListener('click', clickNextHandler);\r\n      buttonClose?.removeEventListener('click', clickNextHandler);\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [next, defaultCurrent]);\r\n  return (\r\n    <div className={s.container} ref={containerRef}>\r\n      {/** absolute position cards */}\r\n      {swipes.map((item) => (\r\n        <Fragment key={item.id}>\r\n          {item.id !== null && item.children !== null && width && (\r\n            <div\r\n              onTouchMove={onTouchWrapper('onTouchMove')}\r\n              onTouchStart={onTouchWrapper('onTouchStart')}\r\n              onTouchEnd={onTouchWrapper('onTouchEnd')}\r\n              id={item.id?.toString()}\r\n              style={\r\n                item.type === 'current'\r\n                  ? { width, height, left }\r\n                  : item.type === 'prev'\r\n                  ? { width, height, left: left - window.innerWidth }\r\n                  : { width, height, left: left + window.innerWidth }\r\n              }\r\n              className={clsx(\r\n                s.card,\r\n                item.type === 'prev' ? s.prev : item.type === 'next' ? s.next : ''\r\n              )}\r\n              ref={getRef(item.id)}\r\n            >\r\n              {/** Block of content */}\r\n              <div className={clsx(s.content, className)}>{item.children}</div>\r\n            </div>\r\n          )}\r\n          {item.id === null && (\r\n            <div\r\n              style={\r\n                item.type === 'current'\r\n                  ? { width, height, left }\r\n                  : item.type === 'prev'\r\n                  ? { width, height, left: left - windowWidth }\r\n                  : { width, height, left: left + windowWidth }\r\n              }\r\n              className={clsx(\r\n                s.card,\r\n                item.type === 'prev' ? s.prev : item.type === 'next' ? s.next : ''\r\n              )}\r\n            >\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                height=\"24px\"\r\n                viewBox=\"0 0 24 24\"\r\n                width=\"24px\"\r\n                fill=\"#000000\"\r\n              >\r\n                <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z\" />\r\n              </svg>\r\n            </div>\r\n          )}\r\n        </Fragment>\r\n      ))}\r\n      {typeof isMobile !== 'undefined' && !isMobile && prev?.id !== null && (\r\n        <div className={clsx(s.button, s.button__prev)}>\r\n          <button\r\n            className={s.icon__button}\r\n            type=\"button\"\r\n            disabled={load || isMobile}\r\n            onClick={clickPrevHandler}\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              height=\"24px\"\r\n              viewBox=\"0 0 24 24\"\r\n              width=\"24px\"\r\n              fill=\"#000000\"\r\n            >\r\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n              <path d=\"M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {typeof isMobile !== 'undefined' && !isMobile && next?.id !== null && (\r\n        <div className={clsx(s.button, s.button__next)}>\r\n          <button\r\n            className={s.icon__button}\r\n            type=\"button\"\r\n            disabled={load || isMobile}\r\n            onClick={clickNextHandler}\r\n          >\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              height=\"24px\"\r\n              viewBox=\"0 0 24 24\"\r\n              width=\"24px\"\r\n              fill=\"#000000\"\r\n            >\r\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n              <path d=\"M10.02 6L8.61 7.41 13.19 12l-4.58 4.59L10.02 18l6-6-6-6z\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {dots && (\r\n        <div className={s.dots}>\r\n          {dots.list.map((item) => (\r\n            <div\r\n              role=\"button\"\r\n              onClick={clickDotHandler}\r\n              tabIndex={item}\r\n              key={item}\r\n              className={clsx(s.dot, current?.id === item ? s.active : '')}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nSwiper.defaultProps = {\r\n  className: '',\r\n};\r\n","/******************************************************************************************\r\n * Repository: https://github.com/kolserdav/swiper.git\r\n * Author: Sergey Kolmiller\r\n * Email: <serega12101983@gmail.com>\r\n * License: MIT\r\n * License Text: The code is distributed as is. There are no guarantees regarding the functionality of the code or parts of it.\r\n * Copyright: kolserdav, All rights reserved (c)\r\n * Create date: Mon Nov 29 2021 16:18:08 GMT+0700 (Krasnoyarsk Standard Time)\r\n ******************************************************************************************/\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Swiper, GetSwipeHandler, Swipe } from 'swiper';\r\nimport 'swiper/dist/index.css';\r\n\r\nconst COUNT = 4;\r\n\r\nconst getNext: GetSwipeHandler = async (old) => {\r\n  let id: any = old + 1;\r\n  id = id <= COUNT ? id : null;\r\n  return {\r\n    id,\r\n    children: <h1>Test {id}</h1>,\r\n  };\r\n};\r\n\r\nconst getPrevios: GetSwipeHandler = async (old) => {\r\n  let id = old - 1;\r\n  id = id >= 0 ? id : COUNT;\r\n  return {\r\n    id,\r\n    children: <h1>Test {id}</h1>,\r\n  };\r\n};\r\n\r\nconst App = (): React.ReactElement => {\r\n  const [current, setCurrent] = useState<Swipe>();\r\n  useEffect(() => {\r\n    if (!current) {\r\n      (async () => {\r\n        setCurrent(await getNext(-1));\r\n      })();\r\n    }\r\n  }, [current]);\r\n\r\n  return (\r\n    <div className='container'>\r\n      {current && (\r\n        <Swiper\r\n          blockSwipe={false}\r\n          defaultCurrent={current}\r\n          getNext={getNext}\r\n          getPrev={getPrevios}\r\n          invitationAnimation={true}\r\n          dots={{\r\n            list: [0,1,2,3,4],\r\n            active: current.id || 1\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","/******************************************************************************************\r\n * Repository: https://github.com/kolserdav/swiper.git\r\n * Author: Sergey Kolmiller\r\n * Email: <serega12101983@gmail.com>\r\n * License: MIT\r\n * License Text: The code is distributed as is. There are no guarantees regarding the functionality of the code or parts of it.\r\n * Copyright: kolserdav, All rights reserved (c)\r\n * Create date: Mon Nov 29 2021 16:18:08 GMT+0700 (Krasnoyarsk Standard Time)\r\n ******************************************************************************************/\r\nimport React from 'react';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createRoot } from 'react-dom/client';\r\nconst container = document.getElementById('root') as HTMLElement;\r\nconst root = createRoot(container);\r\nroot.render(<App />);\r\n"],"sourceRoot":""}